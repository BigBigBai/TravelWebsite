{"ast":null,"code":"var _jsxFileName = \"/Users/johnzhou/Desktop/2022_fall/Travel_project/comment01/comment02/src/comments/Comments.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport CommentForm from \"./CommentForm\";\nimport Comment from \"./Comment\";\nimport { getComments as getCommentsApi, createComment as createCommentApi, updateComment as updateCommentApi, deleteComment as deleteCommentApi } from \"../api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Comments = _ref => {\n  _s();\n  let {\n    commentsUrl,\n    currentUserId\n  } = _ref;\n  const [backendComments, setBackendComments] = useState([]);\n  const [activeComment, setActiveComment] = useState(null);\n  const rootComments = backendComments.filter(backendComment => backendComment.parentId === null);\n  const getReplies = commentId => backendComments.filter(backendComment => backendComment.parentId === commentId).sort((a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());\n  const addComment = (text, parentId) => {\n    createCommentApi(text, parentId).then(comment => {\n      setBackendComments([comment, ...backendComments]);\n      setActiveComment(null);\n    });\n  };\n  const updateComment = (text, commentId) => {\n    updateCommentApi(text).then(() => {\n      const updatedBackendComments = backendComments.map(backendComment => {\n        if (backendComment.id === commentId) {\n          return {\n            ...backendComment,\n            body: text\n          };\n        }\n        return backendComment;\n      });\n      setBackendComments(updatedBackendComments);\n      setActiveComment(null);\n    });\n  };\n  const deleteComment = commentId => {\n    if (window.confirm(\"Are you sure you want to remove comment?\")) {\n      deleteCommentApi().then(() => {\n        const updatedBackendComments = backendComments.filter(backendComment => backendComment.id !== commentId);\n        setBackendComments(updatedBackendComments);\n      });\n    }\n  };\n  useEffect(() => {\n    getCommentsApi().then(data => {\n      setBackendComments(data);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comments\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"comments-title\",\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-form-title\",\n      children: \"Write comment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CommentForm, {\n      submitLabel: \"Write\",\n      handleSubmit: addComment\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments-container\",\n      children: rootComments.map(rootComment => /*#__PURE__*/_jsxDEV(Comment, {\n        comment: rootComment,\n        replies: getReplies(rootComment.id),\n        activeComment: activeComment,\n        setActiveComment: setActiveComment,\n        addComment: addComment,\n        deleteComment: deleteComment,\n        updateComment: updateComment,\n        currentUserId: currentUserId\n      }, rootComment.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(Comments, \"Nh9uypyQCza2uraZ+lh8htJiD1M=\");\n_c = Comments;\nexport default Comments;\nvar _c;\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"names":["useState","useEffect","CommentForm","Comment","getComments","getCommentsApi","createComment","createCommentApi","updateComment","updateCommentApi","deleteComment","deleteCommentApi","Comments","commentsUrl","currentUserId","backendComments","setBackendComments","activeComment","setActiveComment","rootComments","filter","backendComment","parentId","getReplies","commentId","sort","a","b","Date","createdAt","getTime","addComment","text","then","comment","updatedBackendComments","map","id","body","window","confirm","data","rootComment"],"sources":["/Users/johnzhou/Desktop/2022_fall/Travel_project/comment01/comment02/src/comments/Comments.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport CommentForm from \"./CommentForm\";\nimport Comment from \"./Comment\";\nimport {\n  getComments as getCommentsApi,\n  createComment as createCommentApi,\n  updateComment as updateCommentApi,\n  deleteComment as deleteCommentApi,\n} from \"../api\";\n\nconst Comments = ({ commentsUrl, currentUserId }) => {\n  const [backendComments, setBackendComments] = useState([]);\n  const [activeComment, setActiveComment] = useState(null);\n  const rootComments = backendComments.filter(\n    (backendComment) => backendComment.parentId === null\n  );\n  const getReplies = (commentId) =>\n    backendComments\n      .filter((backendComment) => backendComment.parentId === commentId)\n      .sort(\n        (a, b) =>\n          new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n      );\n  const addComment = (text, parentId) => {\n    createCommentApi(text, parentId).then((comment) => {\n      setBackendComments([comment, ...backendComments]);\n      setActiveComment(null);\n    });\n  };\n\n  const updateComment = (text, commentId) => {\n    updateCommentApi(text).then(() => {\n      const updatedBackendComments = backendComments.map((backendComment) => {\n        if (backendComment.id === commentId) {\n          return { ...backendComment, body: text };\n        }\n        return backendComment;\n      });\n      setBackendComments(updatedBackendComments);\n      setActiveComment(null);\n    });\n  };\n  const deleteComment = (commentId) => {\n    if (window.confirm(\"Are you sure you want to remove comment?\")) {\n      deleteCommentApi().then(() => {\n        const updatedBackendComments = backendComments.filter(\n          (backendComment) => backendComment.id !== commentId\n        );\n        setBackendComments(updatedBackendComments);\n      });\n    }\n  };\n\n  useEffect(() => {\n    getCommentsApi().then((data) => {\n      setBackendComments(data);\n    });\n  }, []);\n\n  return (\n    <div className=\"comments\">\n      <h3 className=\"comments-title\">Comments</h3>\n      <div className=\"comment-form-title\">Write comment</div>\n      <CommentForm submitLabel=\"Write\" handleSubmit={addComment} />\n      <div className=\"comments-container\">\n        {rootComments.map((rootComment) => (\n          <Comment\n            key={rootComment.id}\n            comment={rootComment}\n            replies={getReplies(rootComment.id)}\n            activeComment={activeComment}\n            setActiveComment={setActiveComment}\n            addComment={addComment}\n            deleteComment={deleteComment}\n            updateComment={updateComment}\n            currentUserId={currentUserId}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Comments;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}